# synopsis.iq
!use instacart_small
!set outputformat mysql
!set maxwidth 300

CREATE MODELTYPE tablegan FOR SYNOPSIS AS CLASS 'TableGAN' IN 'models/TableGAN.py';
(0 rows modified)

!update

SHOW MODELTYPES;
+----------------+----------+----------+------------+--------------------+
| modeltype_name | category | location | class_name | uri                |
+----------------+----------+----------+------------+--------------------+
| tablegan       | SYNOPSIS | LOCAL    | TableGAN   | models/TableGAN.py |
+----------------+----------+----------+------------+--------------------+
(1 row)

!ok

SHOW HYPERPARAMETERS WHERE modeltype_name = 'tablegan';
+----------------+---------------------+------------+---------------+-------------------------------------------------------+
| modeltype_name | hyperparameter_name | value_type | default_value | description                                           |
+----------------+---------------------+------------+---------------+-------------------------------------------------------+
| tablegan       | random_dim          | int        | 100           | the size of the random sample passed to the generator |
| tablegan       | num_channels        | int        | 64            | the number of channels                                |
| tablegan       | l2scale             | float      | 1e-5          | regularization term                                   |
| tablegan       | batch_size          | int        | 500           | the number of samples to process in each step         |
| tablegan       | epochs              | int        | 300           | the number of training epochs                         |
+----------------+---------------------+------------+---------------+-------------------------------------------------------+
(5 rows)

!ok

CREATE MODELTYPE tablegan FOR SYNOPSIS AS CLASS 'TableGAN' IN 'models/TableGAN.py';

modeltype 'tablegan' already exists
!error

TRAIN MODEL tgan MODELTYPE tablegan_error ON instacart_small.order_products(reordered, add_to_cart_order);

modeltype 'tablegan_error' does not exist
!error

TRAIN MODEL tgan_new MODELTYPE tablegan ON instacart_small.order_products(reordered, add_to_cart_order) OPTIONS ( 'epochs'=1 );
(0 rows modified)

!update

TRAIN MODEL tgan_new MODELTYPE tablegan ON instacart_small.order_products(reordered, add_to_cart_order);

model 'tgan_new' already exists
!error

SHOW MODELS;
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| model_name | modeltype_name | schema_name     | table_name     | columns                        | table_rows | trained_rows | model_status | model_options |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| tgan_new   | tablegan       | instacart_small | order_products | [reordered, add_to_cart_order] |    1384617 |      1384617 | ENABLED      | {"epochs":1}  |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
(1 row)

!ok

ALTER MODEL tgan_new RENAME TO tgan;
(0 rows modified)

!update

SHOW MODELS;
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| model_name | modeltype_name | schema_name     | table_name     | columns                        | table_rows | trained_rows | model_status | model_options |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| tgan       | tablegan       | instacart_small | order_products | [reordered, add_to_cart_order] |    1384617 |      1384617 | ENABLED      | {"epochs":1}  |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
(1 row)

!ok

CREATE SYNOPSIS tgan_syn FROM MODEL tgan_error LIMIT 1000;

model 'tgan_error' does not exist
!error

ALTER MODEL tgan DISABLE;
(0 rows modified)

!update

SHOW MODELS;
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| model_name | modeltype_name | schema_name     | table_name     | columns                        | table_rows | trained_rows | model_status | model_options |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
| tgan       | tablegan       | instacart_small | order_products | [reordered, add_to_cart_order] |    1384617 |      1384617 | DISABLED     | {"epochs":1}  |
+------------+----------------+-----------------+----------------+--------------------------------+------------+--------------+--------------+---------------+
(1 row)

!ok

CREATE SYNOPSIS tgan_syn FROM MODEL tgan LIMIT 1000;

model 'tgan' is disabled
!error

ALTER MODEL tgan ENABLE;
(0 rows modified)

!update

CREATE SYNOPSIS tgan_syn FROM MODEL tgan LIMIT 1000;
(0 rows modified)

!update

SHOW SYNOPSES;
+---------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| synopsis_name | model_name | schema_name     | table_name     | columns                        | rows | ratio      | external | synopsis_status | synopsis_statistics |
+---------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| tgan_syn      | tgan       | instacart_small | order_products | [reordered, add_to_cart_order] | 1000 | 0.00072222 | NO       | ENABLED         |                     |
+---------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
(1 row)

!ok

ALTER SYNOPSIS tgan_syn RENAME TO order_products_syn;
(0 rows modified)

!update

SHOW SYNOPSES;
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| synopsis_name      | model_name | schema_name     | table_name     | columns                        | rows | ratio      | external | synopsis_status | synopsis_statistics |
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| order_products_syn | tgan       | instacart_small | order_products | [reordered, add_to_cart_order] | 1000 | 0.00072222 | NO       | ENABLED         |                     |
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
(1 row)

!ok

CREATE SYNOPSIS order_products_syn FROM MODEL tgan LIMIT 1000;

synopsis 'order_products_syn' already exists
!error

SELECT count(*) as c2 FROM instacart_small.order_products_syn;
+------+
| c2   |
+------+
| 1000 |
+------+
(1 row)

!ok

# simple aggregation
SELECT APPROXIMATE avg(add_to_cart_order) as average FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(average=[CAST(/(CASE(=($1, 0), null:INTEGER, $0), $1)):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($1)], agg#1=[COUNT()])
      JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

ALTER SYNOPSIS order_products_syn DISABLE;
(0 rows modified)

!update

SHOW SYNOPSES;
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| synopsis_name      | model_name | schema_name     | table_name     | columns                        | rows | ratio      | external | synopsis_status | synopsis_statistics |
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
| order_products_syn | tgan       | instacart_small | order_products | [reordered, add_to_cart_order] | 1000 | 0.00072222 | NO       | DISABLED        |                     |
+--------------------+------------+-----------------+----------------+--------------------------------+------+------------+----------+-----------------+---------------------+
(1 row)

!ok

# simple aggregation (synopsis disabled) -> exact query
SELECT APPROXIMATE avg(add_to_cart_order) as average FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(average=[CAST(/(CASE(=($1, 0), null:INTEGER, $0), $1)):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($2)], agg#1=[COUNT()])
      JdbcTableScan(table=[[jdbc, instacart_small, order_products]])
!plan

ALTER SYNOPSIS order_products_syn ENABLE;
(0 rows modified)

!update

# order_id is not in the synopsis -> exact query
SELECT APPROXIMATE avg(order_id) as average FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(average=[CAST(/(CASE(=($1, 0), null:INTEGER, $0), $1)):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($0)], agg#1=[COUNT()])
      JdbcTableScan(table=[[jdbc, instacart_small, order_products]])
!plan

# scaling aggregation
SELECT APPROXIMATE sum(reordered) FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(EXPR$0=[CAST(*(1384.617:DECIMAL(7, 3), $0)):INTEGER])
    JdbcAggregate(group=[{}], EXPR$0=[SUM($0)])
      JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

# aggregation with WHERE clause
SELECT APPROXIMATE avg(add_to_cart_order) as average FROM instacart_small.order_products WHERE reordered = 1;

JdbcToEnumerableConverter
  JdbcProject(average=[CAST(/(CASE(=($1, 0), null:INTEGER, $0), $1)):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($1)], agg#1=[COUNT()])
      JdbcFilter(condition=[=($0, 1)])
        JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

# aggregation with WHERE and GROUP BY clauses
SELECT APPROXIMATE reordered, count(*) as order_count FROM instacart_small.order_products WHERE add_to_cart_order < 5 GROUP BY reordered;

JdbcToEnumerableConverter
  JdbcProject(reordered=[$0], order_count=[CAST(*(1384.617:DECIMAL(7, 3), $1)):BIGINT NOT NULL])
    JdbcAggregate(group=[{0}], order_count=[COUNT()])
      JdbcFilter(condition=[<($1, 5)])
        JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

SELECT APPROXIMATE add_to_cart_order, count(add_to_cart_order) FROM instacart_small.order_products WHERE add_to_cart_order < 3 GROUP BY add_to_cart_order;

JdbcToEnumerableConverter
  JdbcProject(add_to_cart_order=[$0], EXPR$1=[CAST(*(1384.617:DECIMAL(7, 3), $1)):BIGINT NOT NULL])
    JdbcAggregate(group=[{1}], EXPR$1=[COUNT()])
      JdbcFilter(condition=[<($1, 3)])
        JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

# supported aggregate functions
SELECT APPROXIMATE stddev(add_to_cart_order), variance(add_to_cart_order) FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(EXPR$0=[CAST(POWER(/(-(CASE(=($1, 0), null:INTEGER, $0), /(*(CASE(=($1, 0), null:INTEGER, $2), CASE(=($1, 0), null:INTEGER, $2)), $1)), CASE(=($1, 1), null:BIGINT, -($1, 1))), 0.5:DECIMAL(2, 1))):INTEGER], EXPR$1=[CAST(/(-(CASE(=($1, 0), null:INTEGER, $0), /(*(CASE(=($1, 0), null:INTEGER, $2), CASE(=($1, 0), null:INTEGER, $2)), $1)), CASE(=($1, 1), null:BIGINT, -($1, 1)))):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($1)], agg#1=[COUNT()], agg#2=[$SUM0($0)])
      JdbcProject(add_to_cart_order=[$1], $f2=[*($1, $1)])
        JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

SELECT APPROXIMATE covar_pop(reordered, add_to_cart_order), corr(reordered, add_to_cart_order) FROM instacart_small.order_products;

JdbcToEnumerableConverter
  JdbcProject(EXPR$0=[CAST(/(-(CAST(*(1384.617:DECIMAL(7, 3), CASE(=($1, 0), null:INTEGER, $0))):INTEGER, /(*(CAST(*(1384.617:DECIMAL(7, 3), CASE(=($1, 0), null:INTEGER, $2))):INTEGER, CAST(*(1384.617:DECIMAL(7, 3), CASE(=($1, 0), null:INTEGER, $3))):INTEGER), CAST(*(1384.617:DECIMAL(7, 3), $1)):BIGINT NOT NULL)), CAST(*(1384.617:DECIMAL(7, 3), $1)):BIGINT NOT NULL)):INTEGER], EXPR$1=[CAST(/(CAST(/(-(CASE(=($1, 0), null:INTEGER, $6), /(*(CASE(=($1, 0), null:INTEGER, $2), CASE(=($1, 0), null:INTEGER, $3)), $1)), $1)):INTEGER, *(CAST(POWER(/(-(CASE(=($1, 0), null:INTEGER, $4), /(*(CASE(=($1, 0), null:INTEGER, $2), CASE(=($1, 0), null:INTEGER, $2)), $1)), $1), 0.5:DECIMAL(2, 1))):INTEGER, CAST(POWER(/(-(CASE(=($1, 0), null:INTEGER, $5), /(*(CASE(=($1, 0), null:INTEGER, $3), CASE(=($1, 0), null:INTEGER, $3)), $1)), $1), 0.5:DECIMAL(2, 1))):INTEGER))):INTEGER])
    JdbcAggregate(group=[{}], agg#0=[$SUM0($2)], agg#1=[COUNT()], agg#2=[$SUM0($0)], agg#3=[$SUM0($1)], agg#4=[$SUM0($3)], agg#5=[$SUM0($4)], agg#6=[$SUM0($5)])
      JdbcProject(reordered=[$0], add_to_cart_order=[$1], $f2=[*($0, $1)], $f3=[*($0, $0)], $f4=[*($1, $1)], $f5=[*($0, $1)])
        JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

SELECT APPROXIMATE min(add_to_cart_order), max(add_to_cart_order), mode(add_to_cart_order) FROM instacart_small.order_products;

EnumerableAggregate(group=[{}], EXPR$0=[MIN($1)], EXPR$1=[MAX($1)], EXPR$2=[MODE($1)])
  JdbcToEnumerableConverter
    JdbcTableScan(table=[[jdbc, instacart_small, order_products_syn]])
!plan

# percentile_disc function (supported in PostgreSQL, Tibero)
#SELECT reordered, percentile_disc(add_to_cart_order) WITHIN GROUP (ORDER BY add_to_cart_order) FROM instacart_small.order_products GROUP BY reordered;


# teardown
DROP SYNOPSIS order_products_syn;
(0 rows modified)

!update

SHOW SYNOPSES;
+
 |
+
+
(0 rows)

!ok

DROP MODEL tgan;
(0 rows modified)

!update

SHOW MODELS;
+
 |
+
+
(0 rows)

!ok

DROP MODELTYPE tablegan;
(0 rows modified)

!update

SHOW MODELTYPES;
+
 |
+
+
(0 rows)

!ok

